// @flow
type FeatureName = string;

type FeatureVariant = string;

export type Rules = {|
  featureFlags: { [key: FeatureName]: FeatureVariant, ... },
  features: { [key: FeatureName]: FeatureVariant, ... },
  validator?: (params: Rules & { name: string }) => boolean,
|};

declare type ProviderProps = {|
  ...Rules,
  children: React$Node,
|};

declare type ConsumerProps = {|
  children: React$Node,
  fallback?: React$Node,
  name: FeatureName,
|};

declare type SwitchProps = {|
  children: React$Node,
  fallback: React$Node,
  name: FeatureName,
|};

declare export function FeatureGateProvider(props: ProviderProps): React$Node;

declare export function useFeature(name: FeatureName): {| ...Rules, enabled: boolean |};

declare export function PermissionGate(props: ConsumerProps): React$Node;
